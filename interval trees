// I took the help of online resources to write this code
#include <iostream>
 
using namespace std;
 
struct Interval
{
        int low, high;
};
 
struct node
{
        Interval *i; 
        int max;
        node *left, *right;
};
 

node * newNode(Interval i)
{
    node *temp = new node;
    temp->i = new Interval(i);
    temp->max = i.high;
    temp->left = temp->right = NULL;
};
 

node *insert(node *root, Interval i)
{   if (root == NULL)
        return newNode(i);
    int l = root->i->low;
    if (i.low < l)
        root->left = insert(root->left, i);
    else
        root->right = insert(root->right, i);
    if (root->max < i.high)
        root->max = i.high;
 
    return root;
}
 

bool doOVerlap(Interval i1, Interval i2)
{
    if (i1.low <= i2.high && i2.low <= i1.high)
        return true;
    return false;
}
 

Interval *intervalSearch(node *root, Interval i)
{
    
    if (root == NULL)
        return NULL;
 
    
    if (doOVerlap(*(root->i), i))
        return root->i;
 
    
    if (root->left != NULL && root->left->max >= i.low)
        return intervalSearch(root->left, i);
 
     return intervalSearch(root->right, i);
}
 

 
int main(int argc, char **argv)
{
 
    Interval ints[] = { { 15, 20 }, { 10, 30 }, { 17, 19 }, { 5, 20 },
            { 12, 15 }, { 30, 40 } };
    int n = sizeof(ints) / sizeof(ints[0]);
    node *root = NULL;
    for (int i = 0; i < n; i++)
        root = insert(root, ints[i]);
 
    Interval x = { 14, 16 };
    
    Interval *res = intervalSearch(root, x);
    if (res == NULL)
        cout << "\nNo Overlapping Interval";
    else
        cout << "\nOverlaps with [" << res->low << ", " << res->high << "]";
    
    Interval y = { 21, 23 };
    
    Interval *res1 = intervalSearch(root, y);
    if (res1 == NULL)
        cout << "\nNo Overlapping Interval";
    else
        cout << "\nOverlaps with [" << res1->low << ", " << res1->high << "]";
}
